module Constants where

import Types
import Data.List

--tags :: [String]
--tags = ["SMX_CLASS", "SMX_ENUM", "SMX_ENUM_DEFAULT", "SMX_PROPERTY", "SMX_SERIALIZE", "SMX_GETTER", "SMX_SETTER", "SMX_READ_ONLY", "SMX_EXPOSE_TO_LUA"]

punctuators :: [Char]
punctuators = ['!', '%', '^', '&', '*', '(', ')', '-', '+', '=', '{', '}', '|', '~', '[', ']', '\\', ';', '\'', ':', '\"', '<', '>', '?', ',', '.', '/', '#']

keywords :: [String]
keywords =
  [ "alignas"
  , "alignof"
  , "and"
  , "and_eq"
  , "asm"
  , "auto"
  , "bitand"
  , "bitor"
  , "bool"
  , "break"
  , "case"
  , "catch"
  , "char"
  , "char8_t"
  , "char16_t"
  , "char32_t"
  , "class"
  , "compl"
  , "concept"
  , "const"
  , "const_cast"
  , "consteval"
  , "constexpr"
  , "constinit"
  , "continue"
  , "co_await"
  , "co_return"
  , "co_yield"
  , "decltype"
  , "default"
  , "delete"
  , "do"
  , "double"
  , "dynamic_cast"
  , "else"
  , "enum"
  , "explicit"
  , "export"
  , "extern"
  , "false"
  , "float"
  , "for"
  , "friend"
  , "goto"
  , "if"
  , "inline"
  , "int"
  , "long"
  , "mutable"
  , "namespace"
  , "new"
  , "noexcept"
  , "not"
  , "not_eq"
  , "nullptr"
  , "operator"
  , "or"
  , "or_eq"
  , "private"
  , "protected"
  , "public"
  , "register"
  , "reinterpret_cast"
  , "requires"
  , "return"
  , "short"
  , "signed"
  , "sizeof"
  , "static"
  , "static_assert"
  , "static_cast"
  , "struct"
  , "switch"
  , "template"
  , "this"
  , "thread_local"
  , "throw"
  , "true"
  , "try"
  , "typedef"
  , "typeid"
  , "typename"
  , "union"
  , "unsigned"
  , "using declaration"
  , "using directive"
  , "virtual"
  , "void"
  , "volatile"
  , "wchar_t"
  , "while"
  , "xor"
  , "xor_eq"
  ]